|STACK
overflow <= <GND>
out[0] <= <GND>
out[1] <= <GND>
out[2] <= <GND>
out[3] <= <GND>
out[4] <= <GND>
out[5] <= <GND>
out[6] <= <GND>
out[7] <= <GND>
sp[0] <= lpm_counter2:inst4.q[0]
sp[1] <= lpm_counter2:inst4.q[1]
sp[2] <= lpm_counter2:inst4.q[2]
sp[3] <= lpm_counter2:inst4.q[3]
push => lpm_counter2:inst4.updown
push => inst1.IN1
clk => inst.IN0
pop => inst1.IN0
data[0] => ~NO_FANOUT~
data[1] => ~NO_FANOUT~
data[2] => ~NO_FANOUT~
data[3] => ~NO_FANOUT~
data[4] => ~NO_FANOUT~
data[5] => ~NO_FANOUT~
data[6] => ~NO_FANOUT~
data[7] => ~NO_FANOUT~


|STACK|lpm_counter2:inst4
clock => lpm_counter:lpm_counter_component.clock
updown => lpm_counter:lpm_counter_component.updown
q[0] <= lpm_counter:lpm_counter_component.q[0]
q[1] <= lpm_counter:lpm_counter_component.q[1]
q[2] <= lpm_counter:lpm_counter_component.q[2]
q[3] <= lpm_counter:lpm_counter_component.q[3]


|STACK|lpm_counter2:inst4|lpm_counter:lpm_counter_component
clock => cntr_5dg:auto_generated.clock
clk_en => ~NO_FANOUT~
cnt_en => ~NO_FANOUT~
updown => cntr_5dg:auto_generated.updown
aclr => ~NO_FANOUT~
aset => ~NO_FANOUT~
aconst => ~NO_FANOUT~
aload => ~NO_FANOUT~
sclr => ~NO_FANOUT~
sset => ~NO_FANOUT~
sconst => ~NO_FANOUT~
sload => ~NO_FANOUT~
data[0] => ~NO_FANOUT~
data[1] => ~NO_FANOUT~
data[2] => ~NO_FANOUT~
data[3] => ~NO_FANOUT~
cin => ~NO_FANOUT~
q[0] <= cntr_5dg:auto_generated.q[0]
q[1] <= cntr_5dg:auto_generated.q[1]
q[2] <= cntr_5dg:auto_generated.q[2]
q[3] <= cntr_5dg:auto_generated.q[3]
cout <= <GND>
eq[0] <= <GND>
eq[1] <= <GND>
eq[2] <= <GND>
eq[3] <= <GND>
eq[4] <= <GND>
eq[5] <= <GND>
eq[6] <= <GND>
eq[7] <= <GND>
eq[8] <= <GND>
eq[9] <= <GND>
eq[10] <= <GND>
eq[11] <= <GND>
eq[12] <= <GND>
eq[13] <= <GND>
eq[14] <= <GND>
eq[15] <= <GND>


|STACK|lpm_counter2:inst4|lpm_counter:lpm_counter_component|cntr_5dg:auto_generated
clock => counter_reg_bit1a[3].CLK
clock => counter_reg_bit1a[2].CLK
clock => counter_reg_bit1a[1].CLK
clock => counter_reg_bit1a[0].CLK
q[0] <= counter_reg_bit1a[0].REGOUT
q[1] <= counter_reg_bit1a[1].REGOUT
q[2] <= counter_reg_bit1a[2].REGOUT
q[3] <= counter_reg_bit1a[3].REGOUT
updown => updown_other_bits.IN1
updown => counter_comb_bita0.DATAF


